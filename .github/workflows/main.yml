name: Rust Build and Auto Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write # нужно для пуша тега и релиза

    steps:
      # 1. Checkout repo с полной историей
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. Setup Rust
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      # 3. Install cargo-edit для set-version
      - name: Install cargo-edit
        run: cargo install cargo-edit

      # 4. Кэширование registry и target
      - name: Cache Cargo registry and build targets
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # 5. Run tests
      - name: Run tests
        run: cargo test --release

      # 6. Build release binary
      - name: Build release binary
        run: cargo build --release

      # 7. Compute next semantic version
      - name: Compute next version and tag
        id: get_version
        run: |
          latest=$(gh release list --limit 1 --json tagName -q '.[0].tagName' || echo "v0.0.0")
          echo "Latest release: $latest"

          if [[ "$latest" =~ v([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
            major="${BASH_REMATCH[1]}"
            minor="${BASH_REMATCH[2]}"
            patch="${BASH_REMATCH[3]}"

            patch=$((patch+1))
            if [ $patch -gt 9 ]; then
              patch=0
              minor=$((minor+1))
            fi
            if [ $minor -gt 9 ]; then
              minor=0
              major=$((major+1))
            fi
            next_version="${major}.${minor}.${patch}"
          else
            next_version="0.1.0"
          fi

          next_tag="v${next_version}"

          echo "Next version: $next_version"
          echo "Next tag: $next_tag"

          echo "RELEASE_VERSION=$next_version" >> $GITHUB_ENV
          echo "RELEASE_TAG=$next_tag" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 8. Update Cargo.toml
      - name: Update Cargo.toml version
        run: cargo set-version ${{ env.RELEASE_VERSION }}

      # 9. Commit Cargo.toml and push tag
      - name: Commit and push version bump
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add Cargo.toml
          git commit -m "Bump version to ${{ env.RELEASE_VERSION }} [skip ci]" || echo "No changes to commit"
          git tag ${{ env.RELEASE_TAG }}
          git push origin main
          git push origin ${{ env.RELEASE_TAG }}

      # 10. Upload release binary
      - name: Create GitHub Release and Upload Asset
        uses: softprops/action-gh-release@v1
        with:
          files: target/release/fastagi_router
          name: Release ${{ env.RELEASE_VERSION }}
          tag_name: ${{ env.RELEASE_TAG }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}