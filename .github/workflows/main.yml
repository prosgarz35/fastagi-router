name: Rust Build and Auto Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # === ЭТАП 1: НАСТРОЙКА СРЕДЫ ===
      - name: 1.1 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 1.2 Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      # === ЭТАП 2: УСТАНОВКА И КЭШИРОВАНИЕ УТИЛИТ (cargo-edit) ===
      - name: 2.1 Cache cargo-edit binary
        id: cache-cargo-edit
        uses: actions/cache@v3
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-cargo-bin-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-bin-

      - name: 2.2 Install cargo-edit
        # Используем --force, чтобы избежать ошибки 101 при восстановлении из кэша
        run: cargo install cargo-edit --force

      # === ЭТАП 3: КЭШИРОВАНИЕ ЗАВИСИМОСТЕЙ ПРОЕКТА ===
      - name: 3.1 Cache Cargo dependencies and target
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-deps-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-deps-

      # === ЭТАП 4: СБОРКА И ТЕСТИРОВАНИЕ ===
      - name: 4.1 Run tests
        run: cargo test --release

      - name: 4.2 Build release binary
        run: cargo build --release

      # === ЭТАП 5: АВТО-ВЕРСИОНИРОВАНИЕ ===
      - name: 5.1 Get next release version
        id: get_version
        run: |
          latest=$(gh release list --limit 1 --json tagName -q '.[0].tagName' || echo "v0.0.0")
          echo "Latest release: $latest"
          
          if [[ "$latest" =~ v([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
            major="${BASH_REMATCH[1]}"
            minor="${BASH_REMATCH[2]}"
            patch="${BASH_REMATCH[3]}"
            
            if [ "$patch" -lt 9 ]; then
              patch=$((patch+1))
            else
              patch=0
              if [ "$minor" -lt 9 ]; then
                minor=$((minor+1))
              else
                minor=0
                major=$((major+1))
              fi
            fi
          else
            major=0
            minor=1
            patch=0
          fi

          next="v${major}.${minor}.${patch}"
          echo "Next release: $next"
          echo "RELEASE_VERSION=$next" >> $GITHUB_ENV
          echo "RELEASE_TAG=$next" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 5.2 Update Cargo.toml version
        run: |
          ver=${{ env.RELEASE_VERSION }}
          ver=${ver#v}
          cargo set-version $ver

      # === ЭТАП 6: УДАЛЕНИЕ СТАРЫХ РЕЛИЗОВ ===
      - name: 6.1 Delete all previous releases and tags
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Checking for old releases to delete..."
          gh release list --limit 100 --json tagName --jq '.[].tagName' | while read tag; do
            if [ "$tag" != "${{ env.RELEASE_TAG }}" ]; then
              echo "Deleting old release and tag: $tag"
              gh release delete "$tag" --yes || echo "Release $tag not found or already deleted."
              git push --delete origin "$tag" || true
            fi
          done

      # === ЭТАП 7: КОММИТ И ПУШ ТЕГА ===
      - name: 7.1 Commit Cargo.toml and push tag
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add Cargo.toml
          git commit -m "Bump version to ${{ env.RELEASE_VERSION }} [skip ci]" || echo "No changes to commit"
          git tag ${{ env.RELEASE_TAG }}
          git push origin main
          git push origin ${{ env.RELEASE_TAG }}

      # === ЭТАП 8: СОЗДАНИЕ НОВОГО РЕЛИЗА ===
      - name: 8.1 Create GitHub Release and Upload Binary
        uses: softprops/action-gh-release@v1
        with:
          files: target/release/fastagi_router
          name: Release ${{ env.RELEASE_VERSION }}
          tag_name: ${{ env.RELEASE_TAG }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}