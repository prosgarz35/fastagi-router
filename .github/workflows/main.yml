name: Rust Build & Auto Release (Super Optimized Cache)

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # 1. Checkout
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. Setup Rust
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      # 3. Install cargo-edit
      - name: Install cargo-edit
        run: cargo install cargo-edit

      # 4. Cache Cargo registry and git sources
      - name: Cache Cargo registry & git
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      # 5. Cache compiled dependencies only (target/deps)
      - name: Cache compiled dependencies
        uses: actions/cache@v3
        with:
          path: target/deps
          key: ${{ runner.os }}-cargo-deps-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-deps-

      # 6. Run tests
      - name: Run tests
        run: cargo test --release

      # 7. Build release binary (fresh)
      - name: Build release binary
        run: cargo build --release

      # 8. Determine next version
      - name: Get next release version
        id: get_version
        run: |
          latest=$(gh release list --limit 1 --json tagName -q '.[0].tagName' || echo "v0.0.0")
          echo "Latest release: $latest"
          if [[ "$latest" =~ v([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
            major="${BASH_REMATCH[1]}"
            minor="${BASH_REMATCH[2]}"
            patch="${BASH_REMATCH[3]}"
            patch=$((patch+1))
            if [ $patch -gt 9 ]; then
              patch=0
              minor=$((minor+1))
            fi
            if [ $minor -gt 9 ]; then
              minor=0
              major=$((major+1))
            fi
            next="${major}.${minor}.${patch}"
          else
            next="0.1.0"
          fi
          echo "Next release: $next"
          echo "RELEASE_VERSION=$next" >> $GITHUB_ENV
          echo "RELEASE_TAG=v$next" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 9. Bump Cargo.toml version
      - name: Bump Cargo version
        run: cargo set-version ${{ env.RELEASE_VERSION }} --allow-dirty

      # 10. Commit Cargo.toml and push tag
      - name: Commit and push version bump
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add Cargo.toml
          git commit -m "Bump version to ${{ env.RELEASE_VERSION }} [skip ci]" || echo "No changes to commit"
          git tag ${{ env.RELEASE_TAG }}
          git push origin main
          git push origin ${{ env.RELEASE_TAG }}

      # 11. Create GitHub Release and upload binary
      - name: Create GitHub Release and Upload Binary
        uses: softprops/action-gh-release@v1
        with:
          files: target/release/fastagi_router
          name: Release ${{ env.RELEASE_TAG }}
          tag_name: ${{ env.RELEASE_TAG }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}