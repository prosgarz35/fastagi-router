name: Build Rust and Auto Release (semantic versioning)

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write # нужно для создания и пуша тегов

    steps:
      # 1. Клонируем репозиторий
      - name: Checkout repository (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. Устанавливаем Rust
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      # 3. Запускаем тесты
      - name: Run tests
        run: cargo test --release

      # 4. Сборка release
      - name: Build release binary
        run: cargo build --release

      # 5. Вычисляем следующий релиз с semantic versioning
      - name: Get next release version
        id: get_version
        run: |
          latest=$(gh release list --limit 1 --json tagName -q '.[0].tagName' || echo "v0.0.0")
          echo "Latest release: $latest"

          if [[ "$latest" =~ v([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
            major="${BASH_REMATCH[1]}"
            minor="${BASH_REMATCH[2]}"
            patch="${BASH_REMATCH[3]}"

            patch=$((patch+1))
            if [[ $patch -gt 9 ]]; then
              patch=0
              minor=$((minor+1))
              if [[ $minor -gt 9 ]]; then
                minor=0
                major=$((major+1))
              fi
            fi

            next="v${major}.${minor}.${patch}"
          else
            next="v0.0.1"
          fi

          echo "Next release: $next"
          echo "RELEASE_VERSION=$next" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 6. Создаем и пушим Git-тег
      - name: Create and Push Git Tag
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag ${{ env.RELEASE_VERSION }}
          git push origin ${{ env.RELEASE_VERSION }}

      # 7. Создаем релиз на GitHub и загружаем бинарник
      - name: Create Release and Upload Asset
        uses: softprops/action-gh-release@v1
        with:
          files: target/release/fastagi_router
          name: Release ${{ env.RELEASE_VERSION }}
          tag_name: ${{ env.RELEASE_VERSION }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}